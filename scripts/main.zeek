module CVE_2022_26809;

export {
	redef enum Notice::Type += {
		ExploitAttempt,
		ExploitSuccess
	};
}

global opnums: set[count] = {
	0, #   : (EfsRpcOpenFileRaw, EfsRpcOpenFileRawResponse),
	4, #   : (EfsRpcEncryptFileSrv, EfsRpcEncryptFileSrvResponse),
	5, #   : (EfsRpcDecryptFileSrv, EfsRpcDecryptFileSrvResponse),
	6, #   : (EfsRpcQueryUsersOnFile, EfsRpcQueryUsersOnFileResponse),
	7, #   : (EfsRpcQueryRecoveryAgents, EfsRpcQueryRecoveryAgentsResponse),
	8, #   : (EfsRpcRemoveUsersFromFile, EfsRpcRemoveUsersFromFileResponse),
	9, #   : (EfsRpcAddUsersToFile, EfsRpcAddUsersToFileResponse),
	12, #   : (EfsRpcFileKeyInfo, EfsRpcFileKeyInfoResponse),
	13, #   : (EfsRpcDuplicateEncryptionInfoFile, EfsRpcDuplicateEncryptionInfoFileResponse),
	15, #   : (EfsRpcAddUsersToFileEx, EfsRpcAddUsersToFileExResponse),
	16, #   : (EfsRpcFileKeyInfoEx, EfsRpcFileKeyInfoExResponse),
	18, #   : (EfsRpcGetEncryptedFileMetadata, EfsRpcGetEncryptedFileMetadataResponse),
	19, #   : (EfsRpcSetEncryptedFileMetadata, EfsRpcSetEncryptedFileMetadataResponse),
	21, #   : (EfsRpcEncryptFileExSrv, EfsRpcEncryptFileExSrvResponse),
	22 #   : (EfsRpcQueryProtectors, EfsRpcQueryProtectorsResponse),
};

# Malicious byte strings
global big_endian = /..\x0c.\x00\x00\x00\x00..................\x5c\x70\x69\x70\x65\x5c\x6c\x73\x61\x73\x73/;
global big_endian_specific = /\x05\x00\x0c\x03\x00\x00\x00\x00..................\x5c\x70\x69\x70\x65\x5c\x6c\x73\x61\x73\x73/;

# Normal byte strings
global little_endian = /..\x0c.\x10\x00\x00\x00..................\x5c\x70\x69\x70\x65\x5c\x6c\x73\x61\x73\x73/;
global little_endian_specific = /\x05\x00\x0c\x03\x10\x00\x00\x00..................\x5c\x70\x69\x70\x65\x5c\x6c\x73\x61\x73\x73/;

event dce_rpc_request_stub(c: connection, fid: count, ctx_id: count,
    opnum: count, stub: string)
{
	if ( opnum in opnums ) {
		local v: vector of string;
		local ip = cat(c$id$orig_h);
		v += "\\";
		v += "\\";
		for ( char in cat(c$id$orig_h) ) {
			v += char;
		}
		local s = join_string_vec(v, "\x01");
		s = gsub(s, /\x01/, "\x00");
		if ( strstr(stub, s) > 0 ) {
			NOTICE([
			    $note=ExploitAttempt,
			    $msg=fmt("%s attempting exploit on %s", c$id$orig_h, c$id$resp_h),
			    $sub=fmt("Using opnum %d", opnum),
			    $identifier=cat(c$id$orig_h, c$id$resp_h)]);
		}
	}
}

event dce_rpc_bind_ack(c: connection, fid: count, sec_addr: string)
{
	local pkt = get_current_packet();
	if ( big_endian_specific in pkt$data )
		NOTICE([
		    $note=ExploitSuccess,
		    $msg=fmt("%s exploited %s", c$id$orig_h, c$id$resp_h),
		    $sub="Found via big_endian_specific",
		    $identifier=cat(c$id$orig_h, c$id$resp_h)]);
	if ( big_endian in pkt$data )
		NOTICE([
		    $note=ExploitSuccess,
		    $msg=fmt("%s exploited %s", c$id$orig_h, c$id$resp_h),
		    $sub="Found via big_endian",
		    $identifier=cat(c$id$orig_h, c$id$resp_h)]);
}
